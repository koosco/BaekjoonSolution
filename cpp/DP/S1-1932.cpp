/*
	[문제]
			7
		  3   8
		8   1   0
	  2   7   4   4
	4   5   2   6   5
	위 그림은 크기가 5인 정수 삼각형의 한 모습이다.

	맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.

	삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

	[입력]
	첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.

	[출력]
	첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.
	
	[풀이]
	* 알고리즘
		1. N을 입력받는다
		2. 500 x 500 크기의 숫자 배열 arr과 dp 배열을 생성한다
		3. 값을 입력받아 배열을 초기화한다
		4. dp[0] = arr[0]
		5. dp[i][0] = arr[i][0] + arr[i-1][0] for i in range(1, N)
		6. 1보다 큰 열에 있는 값에 대해서는 자신의 한 칸 위의 값과 자신의 한 칸 위 왼쪽 값 중 큰 값을 dp 배열의 값에 더해준다
	
	* 변수 설정
		- 값을 입력받아 저장할 때는 왼쪽 위에서부터 저장한다
		- 가장 위의 수는 [0, 0]
		- 그 아래 행에 있는 수는 각각 [1, 0], [1, 1]에 저장한다
		- ...
*/

#include <iostream>
#include <algorithm>

using namespace std;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	int N;
	int arr[500][500], dp[500][500];
	
	cin >> N;
	for(int i=0;i<N;i++) {
		for(int j=0;j<i+1;j++) {
			cin >> arr[i][j];
		}
	}
	
	for(int i=0;i<N;i++) {
		for(int j=0;j<N;j++)
			dp[i][j] = 0;
	}
	
	dp[0][0] = arr[0][0];
	for(int i=1;i<N;i++)
		dp[i][0] = arr[i][0] + dp[i-1][0];
	
	for(int i=1;i<N;i++) {
		for(int j=1;j<N;j++) {
			dp[i][j] = arr[i][j] + max(dp[i-1][j], dp[i-1][j-1]);
		}
	}
	
	cout << *max_element(dp[N-1], dp[N-1] + N) << endl;
	
    return 0;
}
